services:
  db:
    container_name: ${DATABASE_NAME}
    image: postgres:15
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - '5433:5432'
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  app:
    container_name: ${DOCKER_IMAGE_NAME}_api
    build:
      context: .
      dockerfile: Dockerfile
    command: yarn start
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_SCHEMA=${DATABASE_SCHEMA}
      - ADMIN_API_KEY=${ADMIN_API_KEY}
      - DOCKER_IMAGE_NAME=${DOCKER_IMAGE_NAME}
    ports:
      - '3001:3001'
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
      - postgres-data:/app/postgres-data
      - ./uploads:/app/uploads
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  frontend:
    container_name: ${DOCKER_IMAGE_NAME}_frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    environment:
      - REACT_APP_API_URL=http://localhost:3001
    volumes:
      - ./frontend:/app
    depends_on:
      - app
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

volumes:
  postgres-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${PWD}/postgres-data